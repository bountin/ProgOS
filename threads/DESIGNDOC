			+--------------------+
			|        CS 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Mihail Bogojeski <e1127083@student.tuwien.ac.at>
Martin Prebio <martin.prebio@gmail.com>
Alexander Svozil <e1026213@student.tuwien.ac.at>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

original priority thread.h
struct list with thread lock
>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Semaphore:
Our list of waiters is sorted in descendending order by priority, so when the semaphore is freed, the thread with the highest priority is awoken.

Lock:
The lock uses a semaphore, so this is implicit.

Condition Variable:
We sort the waiters for every condition in descending order by priority, so when the condition is met, the the process with highest priority from the waiters is awoken. 

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When a thread calls lock_acquire it is put on the global ordered list of all threads who have already called lock_acquire, but not lock_release(lock acquired list). It is then blocked.
With the next call of next_thread_to_run we compare the priority of the highest ready thread with the priority of the highest thread in the lockaquired list.
Now there are several cases to consider:
The lock acquired list is empty: The thread with the highest priority on the ready list is run.
The highest priority thread in the ready list has a higher priority than the highest priority thread in the lock acquired list:The thread with the highest priority on the ready list is run.  
The highest priority thread in the ready has a lower priority then the highest priority thread in the lock acquired list:

We save the holder of the lock that the highest priority thread waits on and donate the priority to the holder. If the holder is not in the ready list, we repeat the folling steps until the holder is in the ready list:

1. Search the lock acquired list for the thread that the current holder waits for.
2. If there is no such thread (it doesn't wait on a lock), return the highest priority ready thread.
3. If the thread is found; we save the found thread as the holder, and donate the priority to the new holder.

Now the holder is in the ready list and we can run this thread (removing it from the ready list(!!!) ) 

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.
The thread is removed from our lock acquired list and thread yield is called triggering the algorithm described above.


---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

Potential race condition:
If the current thread calls thread_set_priority(), and the thread has a donated priority, the donated priority could be overwritten incorrectly.
We avoided this race by saving only the highest donated priority and the original priority. The original priority is overwritten in any case but the donated priority is only overwritted when the new priority is higher than the donated priority.

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The reason we chose this design is, that it is a very straightforward way to implement priority donations. It automatically eliminates many special cases, because it
only tries to run the highest thread in the lock acquired list.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?

